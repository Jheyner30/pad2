theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
library(ggplot2)
View(df_interaccion)
# Crear el gráfico de barras
ggplot(df_interaccion, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
View(df_interaccion)
View(data_de_tesis_prof)
View(fb)
View(mc)
View(tukey_geno)
View(modelo)
View(tukey_interaccion)
View(tukey_geno)
View(tukey_interaccion)
View(tukey_interaccion)
View(fb)
View(mc)
View(tukey_riego)
View(tukey_result_riego)
# Crear el gráfico de barras
ggplot(mc, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
View(mc)
View(df_interaccion)
library(emmeans)
install.packages("emmeans")
library(emmeans)
library(emmeans)
theme (axis.text.x element_text(angle - 45, hjust-1))
theme (axis.text.x element_text(angle - 45, hjust-1))
theme_minimal() + theme (axis.text.x element_text(angle - 45, hjust-1))
theme (axis.text.x element_text(angle - 45, hjust-1))
ggplot(mc, aes(x = variedad, y = LFA, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = 0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_interaccion, aes(x = variedad, y = LFA, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = 0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df_interaccion)
View(fb)
View(mc)
View(modelo)
View(data_de_tesis_prof)
View(anova_result)
View(tukey_interaccion)
View(tukey_result_geno)
View(tukey_result_interaccion)
View(tukey_result_riego)
View(tukey_riego)
View(tukey_geno)
View(modelo)
View(mc)
View(fb)
View(df_interaccion)
View(data_de_tesis_prof)
View(df_interaccion)
View(df_interaccion)
View(data_de_tesis_prof)
View(data_de_tesis_prof)
View(anova_result)
View(df_interaccion)
View(anova_result)
View(fb)
View(mc)
View(mc)
View(modelo)
View(modelo)
View(tukey_geno)
View(tukey_interaccion)
View(tukey_result_geno)
View(tukey_result_riego)
View(tukey_result_riego)
View(tukey_riego)
View(anova_result)
View(df_interaccion)
library(emmeans)
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mc, aes(x = geno, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Si 'groups' es una columna existente
ggplot(mc, aes(x = variedad, y = LFA, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = 0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Verificar la estructura del dataframe
str(mc)
# Si 'groups' es una columna existente
ggplot(mc, aes(x = variedad, y = LFA, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = 0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(mc)
# Si 'groups' es una columna existente
ggplot(df_interaccion, aes(x = variedad, y = LFA, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = 0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Verificar la estructura del dataframe
str(df_interaccion)
# Si 'groups' es una columna existente
ggplot(df_interaccion, aes(x = variedad, y = LFA, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = 0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mc, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
# geom_text(aes(label = emmean), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico en ggplot
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(width = 1), vjust = -0.1) +
labs(title = "Producción por variedad y Riego",
x = "Variedad",
y = "LFA") +
theme_minimal()
mc <- emmeans(modelo, ~ riego | geno) %>%
as.data.frame()
mc <- emmeans(modelo, ~ riego * geno)
mc <- emmeans(modelo, ~ riego | geno)
# Comparación de medias: emmeans
library(emmeans)
mc <- emmeans(modelo, ~ riego | geno) %>%
as.data.frame()
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(width = 1), vjust = -0.1) +
labs(title = "Producción por variedad y Riego",
x = "Variedad",
y = "LFA") +
theme_minimal()
# Crear el gráfico de barras
ggplot(df_interaccion, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
# Crear el gráfico de barras
ggplot(mc, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
rlang::last_trace()
# Crear el gráfico de barras
> ggplot(df_interaccion, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
# Crear el gráfico de barras
> ggplot(df_interaccion, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
# Crear el gráfico de barras
ggplot(df_interaccion, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
# Crear el gráfico de barras
ggplot(df_interaccion, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
# Crear el gráfico de barras
ggplot(df_interaccion, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(width = 1), vjust = -0.1) +
labs(title = "Producción por variedad y Riego",
x = "Variedad",
y = "LFA") +
theme_minimal()
mc <- emmeans(modelo, ~ riego | geno) %>%
as.data.frame()
mc
View(mc)
mc <- emmeans(modelo, ~ riego * geno)
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(width = 1), vjust = -0.1) +
labs(title = "Producción por variedad y Riego",
x = "Variedad",
y = "LFA") +
theme_minimal()
# Crear el gráfico de barras
ggplot(mc, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
mc
library(emmeans)
modelo <- lme4::lmer(hi ~ (1|bloque) + geno*riego
, data = fb)
anova(modelo)
source('https://inkaverse.com/setup.r')
View(anova_result)
source('https://inkaverse.com/setup.r')
library(readxl)
LA_MOLINA_2014_POTATO_WUE_FB_ <- read_excel("LA MOLINA 2014 POTATO WUE (FB).xlsx",
sheet = "fb")
View(LA_MOLINA_2014_POTATO_WUE_FB_)
library(openxlsx)
data_de_tesis_prof <- openxlsx::read.xlsx("LA MOLINA 2014 POTATO WUE (FB).xlsx", sheet = "fb")
modelo <- lm(formula = lfa ~ bloque + geno + riego + riego*geno, data = data_de_tesis_prof)
anova(modelo)
# Crear un boxplot para visualizar los efectos de geno y riego
ggplot(data_de_tesis_prof, aes(x = factor(geno), y = lfa, fill = factor(riego))) +
geom_boxplot() +
labs(x = "Genotipo", y = "LFA (Respuesta)", fill = "Riego") +
theme_minimal() +
ggtitle("Boxplot de LFA por Genotipo y Tratamiento de Riego")
# Cargar el paquete agricolae
library(agricolae)
# Realizar ANOVA usando el modelo ajustado
anova_result <- anova(modelo)
# Realizar prueba de comparación de medias (ejemplo con Tukey) para los efectos de "geno"
tukey_result_geno <- HSD.test(modelo, "geno", group = TRUE)
# También puedes realizar la prueba para el factor "riego"
tukey_result_riego <- HSD.test(modelo, "riego", group = TRUE)
# Imprimir resultados
print(tukey_result_geno)
print(tukey_result_riego)
# Graficar las comparaciones de medias para el factor "geno"
plot(tukey_result_geno, main = "Comparación de Medias para Genotipo", ylab = "Media de LFA", xlab = "Genotipo")
# Graficar las comparaciones de medias para el factor "riego"
plot(tukey_result_riego, main = "Comparación de Medias para Riego", ylab = "Media de LFA", xlab = "Riego")
library(agricolae)
# Test de Tukey para el factor "riego"
tukey_riego <- HSD.test(modelo, "riego", group = TRUE)
# Test de Tukey para el factor "geno"
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
# Test de Tukey para la interacción "riego:geno"
tukey_interaccion <- HSD.test(modelo, c("riego", "geno"), group = TRUE)
# Ver la estructura de tukey_interaccion
str(tukey_interaccion)
# Ver la estructura del nuevo data frame mc
str(mc)
library(ggplot2)
# Crear el gráfico de barras
ggplot(mc, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(width = 1), vjust = -0.1) +
labs(title = "Producción por variedad y Riego",
x = "Variedad",
y = "LFA") +
theme_minimal()
# Comparación de medias: emmeans
library(emmeans)
mc <- emmeans(modelo, ~ riego * geno)
mc <- emmeans(modelo, ~ riego | geno)
mc <- emmeans(modelo, ~ riego | geno) %>%
as.data.frame()
mc <- emmeans(modelo, ~ riego | geno) %>%
as.data.frame()
mc
library(emmeans)
modelo <- lme4::lmer(hi ~ (1|bloque) + geno*riego
, data = fb)
anova(modelo)
# Mi primera pagina web
1.Tener mi proyecto
1 + 1
#| echo: false
2 * 2
source('https://inkaverse.com/setup.r')
library(openxlsx)
data_de_tesis_prof <- openxlsx::read.xlsx("LA MOLINA 2014 POTATO WUE (FB).xlsx", sheet = "fb")
1 + 1
#| echo: false
2 * 2
source('https://inkaverse.com/setup.r')
library(openxlsx)
data_de_tesis_prof <- openxlsx::read.xlsx("LA MOLINA 2014 POTATO WUE (FB).xlsx", sheet = "fb")
modelo <- lm(formula = lfa ~ bloque + geno + riego + riego*geno, data = data_de_tesis_prof)
anova(modelo)
#cargamos el paquete ggplot2
library(ggplot2)
# Crear un boxplot para visualizar los efectos de geno y riego
ggplot(data_de_tesis_prof, aes(x = factor(geno), y = lfa, fill = factor(riego))) +
geom_boxplot() +
labs(x = "Genotipo", y = "LFA (Respuesta)", fill = "Riego") +
theme_minimal() +
ggtitle("Boxplot de LFA por Genotipo y Tratamiento de Riego")
data_de_tesis_prof <- openxlsx::read.xlsx("LA MOLINA 2014 POTATO WUE (FB).xlsx", sheet = "fb")
modelo <- lm(formula = lfa ~ bloque + geno + riego + riego*geno, data = data_de_tesis_prof)
anova(modelo)
#cargamos el paquete ggplot2
library(ggplot2)
# Crear un boxplot para visualizar los efectos de geno y riego
ggplot(data_de_tesis_prof, aes(x = factor(geno), y = lfa, fill = factor(riego))) +
geom_boxplot() +
labs(x = "Genotipo", y = "LFA (Respuesta)", fill = "Riego") +
theme_minimal() +
ggtitle("Boxplot de LFA por Genotipo y Tratamiento de Riego")
# Cargar el paquete agricolae
library(agricolae)
# Realizar ANOVA usando el modelo ajustado
anova_result <- anova(modelo)
# Realizar prueba de comparación de medias (ejemplo con Tukey) para los efectos de "geno"
tukey_result_geno <- HSD.test(modelo, "geno", group = TRUE)
# También puedes realizar la prueba para el factor "riego"
tukey_result_riego <- HSD.test(modelo, "riego", group = TRUE)
# También puedes realizar la prueba para el factor "riego"
tukey_result_riego <- HSD.test(modelo, "riego", group = TRUE)
# Imprimir resultados
print(tukey_result_geno)
print(tukey_result_riego)
#Mi pagina web\
#Mi pagina web\
---
title: "Untitled"
#Mi pagina web\
---
title: "Untitled"
# Graficar las comparaciones de medias para el factor "riego"
plot(tukey_result_riego, main = "Comparación de Medias para Riego", ylab = "Media de LFA", xlab = "Riego")
# Graficar las comparaciones de medias para el factor "geno"
plot(tukey_result_geno, main = "Comparación de Medias para Genotipo", ylab = "Media de LFA", xlab = "Genotipo")
#Mi pagina web\
#Mi pagina web\
#Mi pagina web\
#Mi pagina web\
---
title: "Untitled"
---
title: "Untitled"
#Mi pagina web\
---
title: "Untitled"
---
title: "Untitled"
print(tukey_riego)
library(agricolae)
print(tukey_riego)
library(agricolae)
print(tukey_riego)
---
title: "Untitled"
---
title: "Untitled"
print(tukey_riego)
\
\
```{# Imprimir resultados}
#
\
# Imprimir resultados
print(tukey_result_geno)
# Imprimir resultados
print(tukey_result_riego)
# Graficar las comparaciones de medias para el factor "geno"
plot(tukey_result_geno, main = "Comparación de Medias para Genotipo", ylab = "Media de LFA", xlab = "Genotipo")
# Graficar las comparaciones de medias para el factor "riego"
plot(tukey_result_riego, main = "Comparación de Medias para Riego", ylab = "Media de LFA", xlab = "Riego")
library(agricolae)
print(tukey_riego)
print(tukey_geno)
print(tukey_interaccion)
# Ver la estructura de tukey_interaccion
str(tukey_interaccion)
# Convertir las filas en columnas y separar los factores
mc <- tukey_interaccion$groups %>%
rownames_to_column("trat") %>%
separate(trat, c("riego", "variedad"))
# Ver la estructura del nuevo data frame mc
str(mc)
library(ggplot2)
# Crear el gráfico de barras
ggplot(mc, aes(x = reorder(groups, lfa), y = lfa, fill = groups)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para que las barras estén horizontales
labs(x = "Grupo", y = "LFA", title = "LFA por Grupo de Riego") +
theme_minimal() +
theme(legend.position = "none")  # Ocultar la leyenda si no es necesaria
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(width = 1), vjust = -0.1) +
labs(title = "Producción por variedad y Riego",
x = "Variedad",
y = "LFA") +
theme_minimal()
# Comparación de medias: emmeans
library(emmeans)
)
mc <- emmeans(modelo, ~ riego | geno)
mc <- emmeans(modelo, ~ riego * geno)
mc <- emmeans(modelo, ~ riego | geno) %>%
as.data.frame()
mc
library(emmeans)
modelo <- lme4::lmer(hi ~ (1|bloque) + geno*riego
, data = fb)
anova(modelo)
source('https://inkaverse.com/setup.r')
anova(modelo)
source('https://inkaverse.com/setup.r')
library(emmeans)
library(multcomp)
library(multcompView)
library(lme4)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
library(lmerTest)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
cm1
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
library(emmeans)
library(multcomp)
library(multcompView)
library(lme4)
library(lmerTest)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
library(emmeans)
cm1 <- emmeans(modelo, ~ geno | riego)
cld(Letters = letters, reversed = T)
cld(Letters = letters, reversed = T)
cm1
cld(Letters = letters, reversed = T)
cld(cm1  = T)
cld(Letters = letters, reversed = T)
# Calcular las medias marginales estimadas por el modelo
cm1 <- emmeans(modelo, ~ geno | riego)
# Aplicar cld al objeto emmeans
resultado_cld <- cld(cm1, Letters = letters, reversed = TRUE)
# Mostrar el resultado
print(resultado_cld)
# Aplicar cld al objeto emmeans
resultado_cld <- cld(cm1, Letters = letters, reversed = TRUE)
library(emmeans)
library(multcomp)
library(multcompView)
# Aplicar cld al objeto emmeans
resultado_cld <- cld(cm1, Letters = letters, reversed = TRUE)
# Calcular las medias marginales estimadas por el modelo
cm1 <- emmeans(modelo, ~ geno | riego)
# Aplicar cld al objeto emmeans
resultado_cld <- cld(cm1, Letters = letters, reversed = TRUE)
# Mostrar el resultado
print(resultado_cld)
# Aplicar la función cld al objeto 'cm1'
resultado_cld <- cld(cm1, Letters = letters, reversed = TRUE)
print(cld_available)
cld_available <- exists("cld", where = asNamespace("multcomp"), mode = "function")
print(cld_available)
# Aplicar la función cld al objeto 'cm1'
resultado_cld <- cld(cm1, Letters = letters, reversed = TRUE)
quarto::quarto_render()
output-file:index
project:
output-dir: docs
output-dir: docs
project:
output-dir: docs
git config --global core.autocrlf true
setwd("~/Clases Programacion _R")
